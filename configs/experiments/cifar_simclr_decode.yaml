# Cifar decoding training.
runtime:
  distribution_strategy: 'off'
  mixed_precision_dtype: 'float16'
  loss_scale: 'dynamic'
  num_gpus: 1
task:
  model:
    mode: 'decode'
    input_size: [32, 32, 3]
    backbone: 
      type: 'resnet' #
      resnet:
        model_id: 50
    backbone_trainable: true
    decoder_head:
      zdim: 2048
    projection_head:
      proj_output_dim: 64
      num_proj_layers: 2
      ft_proj_idx: 1
    supervised_head:
      num_classes: 10
    norm_activation:
      use_sync_bn: false
      norm_momentum: 0.9
      norm_epsilon: 0.00001
  loss:
    projection_norm: true
    temperature: 0.2
  evaluation:
    top_k: 5
    one_hot: true
  # init_checkpoint: rptest1/ckpt-21984
  # init_checkpoint_modules: 'backbone_projection'
  train_data:
    tfds_name: 'cifar10'
    tfds_split: 'train'
    tfds_data_dir: 'xx'
    is_training: true
    global_batch_size: 512
    dtype: 'float16'
    parser:
      mode: 'decode'
  validation_data:
    tfds_name: 'cifar10'
    tfds_split: 'test'
    tfds_data_dir: 'xx'
    is_training: false
    global_batch_size: 512
    dtype: 'float16'
    drop_remainder: false
    parser:
      mode: 'decode'
trainer:
  train_steps: 25000 #48000  # 500 epochs
  validation_steps: 5  # NUM_EXAMPLES (10000) // global_batch_size
  validation_interval: 200 # 96
  steps_per_loop: 200 #   # NUM_EXAMPLES (50000) // global_batch_size
  summary_interval: 200 # 
  checkpoint_interval: 200 # 
  optimizer_config:
    optimizer:
      type: 'lars'
      lars:
        momentum: 0.9
        weight_decay_rate: 0.0
        exclude_from_weight_decay: ['batch_normalization', 'bias']
    learning_rate:
      type: 'cosine'
      cosine:
        initial_learning_rate: 0.06  #  0.01 Ã— BatchSize / 512
        decay_steps: 32000  # train_steps
